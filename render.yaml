# Render deployment configuration

services:
  # The combined web service (backend serving frontend)
  - type: web
    name: run-analysis
    env: python
    plan: starter # Use appropriate plan
    buildCommand: |
      # Install PostgreSQL client if needed
      pip install psycopg2-binary &&
      # Standard build process
      chmod +x build.sh && ./build.sh &&
      # Install requirements
      pip install -r backend/requirements.txt
    startCommand: |
      # Set the database path explicitly
      export DATABASE_PATH="/opt/render/data/runs.db" &&
      # CRITICAL: FORCE PRESERVE_DATABASE to true
      export PRESERVE_DATABASE="true" &&
      # ADDED: Run pre-start backup checking script
      if [ -f "./prestart.sh" ]; then
        chmod +x ./prestart.sh && ./prestart.sh
      fi &&
      # Go to backend and start the server
      cd backend && 
      if [ -f "./start_render.sh" ]; then
        chmod +x start_render.sh && ./start_render.sh
      else
        # Fallback to direct gunicorn if script doesn't exist
        gunicorn --workers=2 --bind=0.0.0.0:$PORT --log-level=info wsgi:app
      fi
    envVars:
      - key: FLASK_APP
        value: server.py
      - key: FLASK_ENV
        value: production
      - key: SECRET_KEY
        generateValue: true # Render will generate a random value for SECRET_KEY
      - key: DATABASE_URL
        fromDatabase:
          name: run-analysis-db
          property: connectionString
      - key: DATABASE_PATH
        value: /opt/render/data/runs.db
      - key: PRESERVE_DATABASE
        value: "true"
      - key: FRONTEND_URL
        # Will use the service URL itself
        value: ${service.url}
    disk:
      name: run-analysis-data
      mountPath: /opt/render/data
      sizeGB: 1

  # Alternatively, you could define separate services for backend and frontend
  # Uncomment to use:
  #
  # - type: web
  #   name: run-analysis-api
  #   env: python
  #   plan: starter
  #   buildCommand: pip install -r requirements.txt
  #   startCommand: cd backend && gunicorn --workers 2 --bind 0.0.0.0:$PORT wsgi:app
  #   envVars:
  #     - key: FLASK_APP
  #       value: server.py
  #     - key: FLASK_ENV
  #       value: production
  #     - key: SECRET_KEY
  #       generateValue: true
  #     - key: DATABASE_URL
  #       fromDatabase:
  #         name: run-analysis-db
  #         property: connectionString
  #     - key: FRONTEND_URL
  #       value: https://run-analysis-frontend.onrender.com
  #
  # - type: web
  #   name: run-analysis-frontend
  #   env: node
  #   plan: starter
  #   buildCommand: npm install && npm run build
  #   startCommand: npx serve -s build
  #   envVars:
  #     - key: REACT_APP_API_URL
  #       value: https://run-analysis-api.onrender.com

# Database
databases:
  - name: run-analysis-db
    databaseName: run_analysis
    plan: starter # Adjust according to needs 