# Render deployment configuration

services:
  # The combined web service (backend serving frontend)
  - type: web
    name: run-analysis
    env: python
    plan: starter # Use appropriate plan
    buildCommand: |
      # Install dependencies with specific versions to prevent conflicts
      pip install Flask==2.0.1 flask-cors==3.0.10 python-dotenv==0.19.0 psycopg2-binary &&
      # Standard build process
      chmod +x build.sh && ./build.sh &&
      # Install remaining requirements without dependency resolution
      pip install -r backend/requirements.txt --no-deps
    startCommand: |
      # Set the database path explicitly to the persistent volume
      export DATABASE_PATH="/opt/render/data/runs.db" &&
      # CRITICAL: Never copy over an existing database - this is commented out for safety
      # [ -f "$DATABASE_PATH" ] || cp -v backend/runs.db "$DATABASE_PATH" 2>/dev/null || true &&
      # Create a backup of the existing database if it exists
      if [ -f "$DATABASE_PATH" ]; then
        mkdir -p /opt/render/data/backups &&
        cp "$DATABASE_PATH" "/opt/render/data/backups/runs_$(date +%Y%m%d_%H%M%S).db" &&
        echo "Created backup of existing database"
      fi &&
      # Go to backend directory
      cd backend && 
      # Make start script executable and run it
      chmod +x start_render.sh && ./start_render.sh
    envVars:
      - key: FLASK_APP
        value: server.py
      - key: FLASK_ENV
        value: production
      - key: SECRET_KEY
        generateValue: true # Render will generate a random value for SECRET_KEY
      - key: DATABASE_URL
        fromDatabase:
          name: run-analysis-db
          property: connectionString
      - key: DATABASE_PATH
        value: /opt/render/data/runs.db
      - key: PRESERVE_DATABASE
        value: "true"
      - key: FRONTEND_URL
        # Will use the service URL itself
        value: ${service.url}
    disk:
      name: run-analysis-data
      mountPath: /opt/render/data
      sizeGB: 1

  # Alternatively, you could define separate services for backend and frontend
  # Uncomment to use:
  #
  # - type: web
  #   name: run-analysis-api
  #   env: python
  #   plan: starter
  #   buildCommand: pip install -r requirements.txt
  #   startCommand: cd backend && gunicorn --workers 2 --bind 0.0.0.0:$PORT wsgi:app
  #   envVars:
  #     - key: FLASK_APP
  #       value: server.py
  #     - key: FLASK_ENV
  #       value: production
  #     - key: SECRET_KEY
  #       generateValue: true
  #     - key: DATABASE_URL
  #       fromDatabase:
  #         name: run-analysis-db
  #         property: connectionString
  #     - key: FRONTEND_URL
  #       value: https://run-analysis-frontend.onrender.com
  #
  # - type: web
  #   name: run-analysis-frontend
  #   env: node
  #   plan: starter
  #   buildCommand: npm install && npm run build
  #   startCommand: npx serve -s build
  #   envVars:
  #     - key: REACT_APP_API_URL
  #       value: https://run-analysis-api.onrender.com

# Database
databases:
  - name: run-analysis-db
    databaseName: run_analysis
    plan: starter # Adjust according to needs 